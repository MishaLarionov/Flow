

	private class VetoableDocumentChangeListener implements VetoableChangeListener, UndoableEditListener {

		@Override
		public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {
			DocumentEvent e = (DocumentEvent) evt;
			DocumentEvent.EventType type = e.getType();
			if (type == DocumentEvent.EventType.INSERT) {
				if (ignoreEvents || !editable)
					return;
				// Sets up some data that was inserted
				String insertedString = "";
				int strLen = e.getLength();
				int caretPos = e.getOffset();

				// Get the string
				try {
					insertedString = doc.getText(caretPos, strLen);
				} catch (BadLocationException e1) {
					e1.printStackTrace();
				}
				// Prepare message for server to send text off
				Data fileModify = new Data("file_text_modify");
				fileModify.put("file_uuid", fileUUID);
				fileModify.put("session_id", Communicator.getSessionID());
				fileModify.put("mod_type", "INSERT");
				fileModify.put("idx", caretPos);
				fileModify.put("str", insertedString);

				// Send message to server about what was inserted
				Data response = Communicator.communicate(fileModify);
				String status = response.get("status", String.class);
				// Makes sure that things work
				if (response == null || status == null || !status.equals("OK")) {
					JOptionPane.showConfirmDialog(null, "Your change to the file could not be processed.\nThis could be because the server is down, or your document is out of sync.\nTry closing this tab, opening it again, or restarting Flow.", "Failed to edit file", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
					throw new PropertyVetoException("Server denied insertion", evt);
				}
				// Updates syntax highlighting
				highlightSyntax();
			} else if (type == DocumentEvent.EventType.REMOVE) {
				if (ignoreEvents || !editable)
					return;
				// Gets info on the change
				int removedLen = e.getLength();
				int caretPos = e.getOffset();

				// Creates message for server
				Data metadataModify = new Data("file_text_modify");
				metadataModify.put("file_uuid", fileUUID);
				metadataModify.put("session_id", Communicator.getSessionID());
				metadataModify.put("mod_type", "DELETE");
				metadataModify.put("idx", caretPos);
				metadataModify.put("len", removedLen);

				// Sends message to server
				Data response = Communicator.communicate(metadataModify);
				String status = response.get("status", String.class);
				if (response == null || status == null || !status.equals("OK")) {
					JOptionPane.showConfirmDialog(null, "Your change to the file could not be processed.\nThis could be because the server is down, or your document is out of sync.\nTry closing this tab, opening it again, or restarting Flow.", "Failed to edit file", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
					throw new PropertyVetoException("Server denied removal", evt);
				}
				// Highlights syntax
				highlightSyntax();
			}
		}

		@Override
		public void undoableEditHappened(UndoableEditEvent e) {

e.get			
		}
	}